version: "3.8"

services:
  mysql:
    image: mysql:8.0
    container_name: devops-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: devops_todo
      MYSQL_USER: devops
      MYSQL_PASSWORD: devops123
    ports:
      - "3309:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - devops-network

  # Nginx 리버스 프록시 추가
  nginx:
    image: nginx:alpine
    container_name: devops-nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - devops-network

  # Spring Boot 백엔드 서비스
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: devops-backend
    restart: always
    expose:
      - "8080"
    depends_on:
      - mysql
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/devops_todo?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=password
    networks:
      - devops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # React 프론트엔드 서비스
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: devops-frontend
    restart: always
    expose:
      - "80"
    depends_on:
      - backend
    networks:
      - devops-network

volumes:
  mysql_data:

# 네트워크 정의 - nginx.conf에서 사용하는 컨테이너 이름 통신을 위해 필수!
networks:
  devops-network:
    driver: bridge
